import java.nio.file.Files

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // id 'java-library'
}

/*
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}
*/

def version = "v0.00"
def distributionDir = ""


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
   main {
      java {
         srcDir "${buildDir}/generated/sources/java/main/impcity/"
      }
   }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    implementation files('libs/RoguelikeGameKit.jar', 'libs/lwjgl.jar', 'libs/lwjgl_util.jar')
}

application {
    mainClass = 'impcity.game.ImpCity'
    def sep = File.pathSeparator

    println "Project Directory: $projectDir"

    applicationDefaultJvmArgs +=
            "-Djava.library.path=lwjgl-2.9.3\\native\\windows" + sep + "lwjgl-2.9.3/native/linux"
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    dependsOn cleanTest
    testLogging
    {
        showStandardStreams = true
    }
}

/*
tasks.register('generateVersionSource', Delete)
{
    Directory directory = layout.buildDirectory.dir("generated/sources/headers/java/main").get()
    Directory tmp = layout.buildDirectory.dir("tmp/generateVersionSource").get()

    println "Generating version class in: " + directory

    Files.createDirectories(directory.asFile.toPath())

    java.io.File file = new java.io.File(tmp.file("Version.java").toString())

    file.withWriter('utf-8') { 
         writer -> writer.writeLine 'package impcity; public class ImpCityVersion { public static final String VERSION = "XYZ"; }'
    }
}


tasks.register('copyVersionSource', Copy)
{
    dependsOn generateVersionSource

    Directory directory = layout.buildDirectory.dir("generated/sources/java/main").get()
    Directory tmp = layout.buildDirectory.dir("tmp/generateVersionSource").get()

    from tmp.file("Version.java")
    into directory.dir("impcity")
}


compileJava.dependsOn copyVersionSource
*/

tasks.register('cleanDistributionFiles', Delete) {

    Directory src = layout.projectDirectory.dir("src/main/java/impcity/game");

    java.io.File file = new java.io.File(src.file("Version.java").toString());

    def line = ""

    file.withReader { 
        reader ->
        while ((line = reader.readLine()) != null) {
            // println line
            def p = line.indexOf("VERSION = ");
            if(p > 0)
            {
                version = line.substring(p+11, p+16);
                println 'Version found: ' + version
            }
        }
    }


    distributionDir = "imp_city-" + version + "_linux"

    Directory dest = layout.buildDirectory.get()
    delete dest.dir(distributionDir)
}

tasks.register('copyDistributionBinFiles', Copy) {
    Directory dest = layout.buildDirectory.get()
    dest = dest.dir(distributionDir)

    Directory bin = dest.dir("app/bin")
    println "Dest folder: " + bin
    from layout.projectDirectory.dir("lwjgl-2.9.3")
    into bin.dir("lwjgl-2.9.3")
}

tasks.register('copyDistributionLibFiles', Copy) {

    dependsOn jar

    Directory dest = layout.buildDirectory.get()
    dest = dest.dir(distributionDir)

    Directory lib = dest.dir("app/lib")
    println "Dest folder: " + lib

    from layout.buildDirectory.file("libs/app.jar")
    from layout.projectDirectory.dir("libs")
    into lib
}

tasks.register('copyDistributionFiles', Copy) {

    dependsOn cleanDistributionFiles, copyDistributionBinFiles, copyDistributionLibFiles

    Directory dest = layout.buildDirectory.get()
    dest = dest.dir(distributionDir)
    println "Dest folder " + dest

    from layout.projectDirectory.file("../credits.txt")
    from layout.projectDirectory.file("../devlog.txt")
    from layout.projectDirectory.file("src/main/scripts/start.sh")
    into dest
}

tasks.register('createDistribution', Delete) {
    description = 'Builds an Imp City distribution for Linux.'

    dependsOn copyDistributionFiles
}